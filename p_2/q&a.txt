e_1 -> Muestreo periódico del sensor de efecto Hall

    Crea una aplicación que lea el valor del sensor de efecto Hall cada 2
  segundos y muestre el valor leído por el puerto serie.

  ------------------------------------------------------------------------------

  Q > ¿Qué prioridad tiene la tarea inicial que ejecuta la función `app_main()`?
    ¿Con qué llamada de ESP-IDF podemos conocer la prioridad de una tarea?

  A > De acuerdo a la documentación de ESP-IDF, la tarea principal que ejecuta
    `app_main` tiene una prioridad RTOS fija de 1 (un nivel por encima de la
    prioridad mínima).

      Por otra parte, para conocer la prioridad de una tarea en tiempo de
    ejecución, se puede usar la función `uxTaskPriorityGet(...)`, que toma
    como argumento un 'handle' de la tarea cuya prioridad se quiere saber. Si
    dicha tarea es la que se está ejecutando, basta con pasar un 'handle'
    `NULL`.

********************************************************************************

e_2 -> Creación de una tarea para realizar el muestreo

    Modifica el código anterior para crear una nueva tarea que sea la encargada
  de realizar el muestreo. Dicha tarea comunicará la lectura con la tarea
  inicial (la que ejecuta `app_main()`) a través de una variable global.
    
    La tarea creada leerá el valor del sensor de efecto Hall con un periodo que
  se pasará como argumento a la tarea. La tarea inicial recogerá ese valor y lo
  mostrará por el puerto serie.

  ------------------------------------------------------------------------------

  Q > ¿Cómo sincronizas ambas tareas? ¿Cómo sabe la tarea inicial que hay un
    nuevo dato generado por la tarea muestreadora?

  A > Sincronizamos la tarea utilizando una variable global (`static`) llamada
    `read`.
      - Inicialmente está a 0ç
      - Cuando la tarea de muestreo realiza una lectura, pone su valor a 1.
      - La tarea principal entra en un bucle que comprueba reiteradamente el
        valor de la variable `read`. Si este es 1, muestra por serie el valor de
        la variable de la lectura y pone el valor de `read` a 0.

      Respecto a la validez de esta sincronización, la tarea de muestreo tiene
    prioridad 5 (mayor que la prioridad de la tarea principal, que es 0). Por
    tanto, la tarea principal se encuentra comprobando el valor de `read` todo
    el rato entre los 'delays' de la tarea de muestreo.

      * Se añade un pequeño 'delay' en el bucle de la tarea principal para que
    no salte el 'watchdog' de la tarea `IDLE`.

  ------------------------------------------------------------------------------

    Q > Si además de pasar el periodo como parámetro, quisiéramos pasar como
      argumento la dirección en la que la tarea muestreadora debe escribir las
      lecturas, ¿cómo pasaríamos los dos argumentos a la nueva tarea?

    A > Basta con definir un `struct`, en nuestro caso llamado
      `reading_task_parameters`, con una variable que determina el periodo de
      muestreo y otra variable que determina la dirección (puntero) en la que
      almacenar los valores muestreados.

********************************************************************************

e_3 -> Comunicación mediante colas

    Modifica el código anterior para que las dos tareas se comuniquen mediante
  una cola de ESP-IDF.

    La tarea creada recibirá como argumento el periodo de muestreo y la cola en
  la que deberá escribir los datos leídos.

  ------------------------------------------------------------------------------
  
  Q > Al enviar un dato por una cola, ¿el dato se pasa por copia o por
    referencia? Consulta la documentación para responder.

  A > Al llamar a la función `xQueueSend`, el valor del elemento pasado por
    referencia como argumento a la función (`&hall`) se copia en el espacio que
    ocupa el siguiente elemento libre de la cola.

      Es decir, la cola existe como un elemento (con memoria reservada en
    función de su tamaño) independiente del contexto en que se llame a la
    función `xQueueSend`. Todo esto suponiendo que la cola se haya creado
    correctamente y no se haya destruido en otra parte.

      Se da una situación análoga para `xQueueReceive`, en la que se copia el
    último valor disponible de la cola en la memoria de la variable que hemos
    pasado como referencia a dicha función.

********************************************************************************

e_4 -> Uso de eventos

    Finalmente, se modificará nuevamente el código de muestre original para que
  utilice eventos para notificar que hay una nueva lectura que mostrar por el
  puerto serie.

    La tarea creada recibirá como argumento el periodo de muestreo. Cuando tenga
  una nueva muestra, la comunicará a través de `esp_event_post_to()`. La tarea
  inicial registrará un 'handler' que se encargará de escribir en el puerto
  serie.

  ------------------------------------------------------------------------------

  Q > ¿Qué debe hacer la tarea inicial tras registrar el 'handle'? ¿Puede
    finalizar?

  A > Una vez creado el bucle de eventos y registrado el 'handle' del evento
    `HALL_NEWSAMPLE`, basta con llamar a la tarea de muestreo, que se encarga
    por si sola de leer periódicamente el sensor Hall y 'postear' el valor
    leído mediante un evento HALL_NEWSAMPLE (mediante el 'loop handle').

      Al crear el bucle de eventos, este existe independientemente de la tarea
    que lo crea. Así, respondiendo a la pregunta, la tarea inicial puede
    finalizar. En nuestro caso, sin embargo, evitamos que finalice mientras que
    se siga ejecutando la tarea de muestreo, pues los parámetros (el único: el
    periodo de muestreo) de dicha tarea están almacenados en la pila de 
    `app_main`.

********************************************************************************

e_5 -> Gestión de múltiples tareas

    Se creará un sistema con múltiples tareas que se comunicarán entre sí por
  eventos:

    - Tarea 'Sampler', similar a la del apartado anterior. Comunicará sus
    muestras mediante eventos.
    
    - Tarea 'Filter', que irá acumulando muestras de la tarea 'Sampler' y
    realizará la media de las últimas 5 muestras recibidas. Enviará dicha media
    mediante un evento.

    - Tarea 'Logger', que escribe por puerto serie lo que le comunican otras
    tareas. Debe ser una tarea diferente a la inicial. Recibirá información a
    través de los eventos correspondientes (a los que deberá suscribirse).

    - Tarea 'Monitor', que monitoriza el estado de las otras tareas creadas.
    Usará el API de Tareas para consultar el espacio de pila restante de cada
    tarea. Comunicará los datos a la tarea 'Logger', incluyendo nombre de la
    tarea, prioridad y cantidad de pila restante. Puede usar la llamada
    `vTaskGetInfo()` que devuelve un tipo `TaskStatus_t`. Enviará la información
    periódicamente (cada minuto) a través de un evento.

    La tarea inicial creará las tareas 'Sampler', 'Filter', 'Logger' y, por
  último, la tarea 'Monitor' que recibirá los 'handlers' de las tareas
  anteriores.

    El código debe organizarse en varios ficheros fuente: uno para la
  funcionalidad relativa al muestreo del sensor y su filtrado, otro para el
  'logging' y otro para la monitorización de tareas. Si se usa algún tipo de
  datos propio (por ejemplo, una cola circular para el filtrado), se incluirá en
  otro fichero fuente diferente, con su fichero de cabecera correspondiente.

  ------------------------------------------------------------------------------

  Q > ¿Qué opinas de esta estructura de código? ¿Es razonable el número de
    tareas empleado? ¿Qué cambiarías en el diseño?

  A > Considero que la estructura del código está bien a nivel general. El
    número de tareas también me parecen razonables, aunque quizá se podría
    incluir la tarea de filtrado dentro de la de muestreo, lo que en nuestro
    caso no sólo eliminaría una tarea, sino también un 'handler' del evento 
    HALL_NEWSAMPLE, junto con toda la complejidad implícita de pasar los valores
    leídos de la tarea de muestreo a la tarea de filtrado.

      Respecto al diseño general, se podríán plantear mejoras como la
    modularización de las distintas funcionalidades en componentes de ESP-IDF
    (comando `idf.py create-component`).

********************************************************************************